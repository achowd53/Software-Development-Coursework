Team Orange Pigeons — Maddy Andersen and Arib Chowdhury
SoftDev
LJ01: Le Voyage de Learnination avec Mongo, Deuxième Phase — MongoDB Chapters 3 & 4
2020-11-12

* MQL operators
   * Update operators: enable us to modify data in the database
      * Ex: $inc, $set, $unset
   * Query operators: provide additional ways to locate data within the database
* Query operators — comparison {“field”:{<operator>:<value>}}
   * $eq → equal to
      * Used as the default operator when an operator is not specified
   * $neq → not equal to
   * $gt → greater than
   * $lt → less than
   * $gte → greater than or equal to
   * $lte → less than or equal to
* Query operators — logic
   * {<operator> : [{statement1}, {statement2}, …]}
      * $and → match all of the specified query clauses
         * Used as the default operator when an operator is not specified
         * Explicit and used when you need to include the same operator more than once in a query
      * $or → at least one of the query clauses is matched
      * $nor → fails to match both given clauses
   * {$not : {statement}}
      * $not → negates the query requirement
* Expressive Query Operator → $expr
   * Allows the use of aggregation expressions within the query language
      * { $expr: { <expression> }}
   * Allows us to use variables and conditional statements
      * db.collection.find({ "$expr": { "$eq": [ "$field1", "$field2"] }}).count()
         * $ both denotes the use of an operator and addresses the field value
   * MQL Syntax: {<field>: {<operator> : <value>}}
   * Aggregation Syntax: {<operator>: {<field>, <value>}}
* Array Operators
   * $push → allows us to add an element to an array; turns a field into an array field if it was previously a different type
   * $all → returns a cursor with all documents in which the specified array field contains all the given elements regardless of their order in the array
      * {<array field> : {$all : <array>}}
   * $size → returns a cursor with all documents where the specified array field is exactly the given length
      * {<array field> : {$size : <number>}}
   * Querying an array field using an array returns only exact array matches
   * Querying an array field with a single element returns all documents where the specified array field contains the given element
* Array Operators and Projection
   * Projection → only include the price and address fields in the cursor result
      * db.<collection>.find({<query>} , {<projection>})
         * 1 include the field
         * 0 exclude the field
         * Use only 1s or only 0s
            * Exceptions is when you want to show a field but explicitly exclude the “_id” field → { “_id: 0” , <field>:1 }
      * $elemMatch (can be used in query or projection parts of a statement) → matches documents that contain an array field with at least one element that matches the specified query criteria OR projects only the array elements with at least one element that matches the specified criteria
         * { <field> : {“$elemMatch” : {<field> : <value>}}}
* Querying Arrays and Sub-Documents
   * MQL uses dot-notation to specify the address of nested elements in a document
      * To use in arrays, specify the position of the element in the array:
         * db.collection.find( {field1.other field.also a field”: “value”})
